#summary user guide.
#labels Featured

= Introduction =

I'm Only Resting is a feature-rich WinForms-based HTTP client.

= User Interface =

The user interface consists of a menu-bar (with menu-items often referred to as "commands" in this document) and a split-panel with one side containing the request interface and one side containing the response interface. Note that the split panel may toggle between horizontal and vertical orientation by double-clicking it.

== Request Panel ==

The request panel is used for constructing HTTP requests. Most of the features available have self-evident purposes.

=== Url ===

The Url textbox is used for entering the request URL.

=== Method ===

The Method panel allows the selection of the request HTTP method.

=== Headers ===

The Headers text box allows the entry of request headers. A header is formatted as `<header name>: <header value>`. Multiple headers are specified by line separation. The same header may not be specified more than once (if the header has multiple values, that may indicated by a comma-separator. For example:

{{{
accept: text/xml, text/html
content-type: text/plain; charset=utf-8
}}}

=== Body ===

The HTTP content may be entered in the Body text box. The text box context-menu contains commands for formatting the content as XML (provided by .NET) or JSON (provided by JSON.NET), if possible (if the content is not well-formed, then no action is executed, but no error occurs either).

=== Buttons ===

The `Submit` button submits the HTTP request asynchronously. The request may be canceled before the response is received by clicking the "cancel" link in the response panel status area. Note that clicking the `Submit` button will validate the request URL and Headers, resulting in an error dialog enumerating the errors if any are detected.

The `Clear` button will clear all form elements in the request panel.

== Response Panel ==

=== Status and Time ===

The Status label presents information about the status of the response. While the response is being executed, a "cancel" link is available for cancelling the request. When the response is received, the HTTP status code and message are displayed.

The Time label shows the length of time it took between submitting the request and receiving the response.

=== Body ===

The Body tab displays the response content. The Output panel provides options for displaying the content:
  * Raw - content is displayed as plain text honoring the content-type charset
  * Pretty - content is displayed as plain text honoring the content-type charset and additionally performs pretty-printing on XML, JSON, and HTML content-types.
    * XML pretty-printing provided by the [http://msdn.microsoft.com/en-us/library/system.xml.linq.xdocument(v=vs.100).aspx .NET `XDocument` type]
    * JSON pretty-printing provided by [http://json.codeplex.com/ Json.NET]
    * HTML pretty-printing provided by [http://tidy.sourceforge.net/ HTML Tidy]
  * Rendered - content is rendered in an embedded IE browser instance. XML, HTML, and images are rendered using IE's rendering engine. JSON is rendered using JSON.NET pretty-printing embedded in an html pre tag. Other types of plain text are embedded in an html pre tag. IE's search feature is enabled.

= Settings =

The `Settings` command displays a dialog box used for setting various configurable options of I'm Only Resting. It is a traditional Windows PropertyGrid which includes explanations for each setting when selected. Validation ensures that no invalid settings are set. Pressing the `Cancel` button exits the dialog without saving. Pressing the `Save` button saves the settings and applies them immediately if possible.

= Persistence =

There are several modes of request and response persistence.

The `File -> Open`, `File -> Save...`, and `File -> Save As...` commands are used for opening and saving requests.  The default file dialog used by these commands may be set by the "Save Request File Dialog Folder" setting.

The `File -> Export Response Body...` command is used for save the _raw_ content bytes of a response.  The default file dialog used by this command may be set by the "Export Response Body File Dialog Folder" setting.

The `File -> Snapshots ->` contains a list of request and response snapshots which are taken every time a request is submitting and the response is received. Selecting one of these snapshots will repopulate the request and response views at the time the snapshot was taken. The maximum number of snapshots which are remembered is set by the "Max Snapshots" setting. Snapshots only last for the current running application instance.

= Content Encoding =

The character encoding used for content is determined by the content-type header's charset parameter. e.g. `content-type: text/plain; charset=utf-16le` indicates that the content should be encoded as utf-16 little endian with no bom.

Encoding rules are driven by the following w3 resources: http://www.w3.org/International/questions/qa-byte-order-mark, http://www.w3.org/TR/2010/WD-html-polyglot-20100624/#character-encoding, and http://www.w3.org/TR/html4/charset. 

We enumerate the rules here:
  * if no charset is given, the default is ISO-8859-1 (ascii compatible 8-bit encoding)
  * utf-8 - encodes the content as utf-8 with the optional BOM included if and only if the the "Encode UTF-8 content with BOM" setting is set to `true`
  * utf-16 - encodes the content as utf-16 big endian with the BOM included
  * utf-16be - encodes the content as utf-16 big endian with no BOM included
  * utf-16le - encodes the content as utf-16 little endian with no BOM included
  * utf-32 - encodes the content as utf-32 big endian with the BOM included
  * utf-32be - encodes the content as utf-32 big endian with no BOM included
  * utf-32le - encodes the content as utf-32 little endian with no BOM included
  * other supported encodings do not include a BOM.
  